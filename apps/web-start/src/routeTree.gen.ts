/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as ApiDemoRouteImport } from "./routes/api-demo";
import { Route as DashboardRouteImport } from "./routes/dashboard";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as LoginRouteImport } from "./routes/login";

const LoginRoute = LoginRouteImport.update({
	id: "/login",
	path: "/login",
	getParentRoute: () => rootRouteImport,
} as any);
const DashboardRoute = DashboardRouteImport.update({
	id: "/dashboard",
	path: "/dashboard",
	getParentRoute: () => rootRouteImport,
} as any);
const ApiDemoRoute = ApiDemoRouteImport.update({
	id: "/api-demo",
	path: "/api-demo",
	getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute;
	"/api-demo": typeof ApiDemoRoute;
	"/dashboard": typeof DashboardRoute;
	"/login": typeof LoginRoute;
}
export interface FileRoutesByTo {
	"/": typeof IndexRoute;
	"/api-demo": typeof ApiDemoRoute;
	"/dashboard": typeof DashboardRoute;
	"/login": typeof LoginRoute;
}
export interface FileRoutesById {
	__root__: typeof rootRouteImport;
	"/": typeof IndexRoute;
	"/api-demo": typeof ApiDemoRoute;
	"/dashboard": typeof DashboardRoute;
	"/login": typeof LoginRoute;
}
export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "/" | "/api-demo" | "/dashboard" | "/login";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/api-demo" | "/dashboard" | "/login";
	id: "__root__" | "/" | "/api-demo" | "/dashboard" | "/login";
	fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	ApiDemoRoute: typeof ApiDemoRoute;
	DashboardRoute: typeof DashboardRoute;
	LoginRoute: typeof LoginRoute;
}

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/login": {
			id: "/login";
			path: "/login";
			fullPath: "/login";
			preLoaderRoute: typeof LoginRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/dashboard": {
			id: "/dashboard";
			path: "/dashboard";
			fullPath: "/dashboard";
			preLoaderRoute: typeof DashboardRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/api-demo": {
			id: "/api-demo";
			path: "/api-demo";
			fullPath: "/api-demo";
			preLoaderRoute: typeof ApiDemoRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexRouteImport;
			parentRoute: typeof rootRouteImport;
		};
	}
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	ApiDemoRoute: ApiDemoRoute,
	DashboardRoute: DashboardRoute,
	LoginRoute: LoginRoute,
};
export const routeTree = rootRouteImport
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();
